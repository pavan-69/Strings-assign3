1. import java.util.*;
 
class Panm 
{
    static String removeDuplicate(char str[], int n)
    {
        int index = 0;
 
        for (int i = 0; i < n; i++)
        {
 
            int j;
            for (j = 0; j < i; j++) 
            {
                if (str[i] == str[j])
                {
                    break;
                }
            }
 
                       if (j == i) 
            {
                str[index++] = str[i];
            }
        }
        return String.valueOf(Arrays.copyOf(str, index));
    }
 
       public static void main(String[] args)
    {
        char str[] = "geeksforgeeks".toCharArray();
        int n = str.length;
        System.out.println(removeDuplicate(str, n));
    }
}


2. import java.io.*;
import java.util.*;
 
class Panj 
{
   
   static void printDups(String str)
  {
    Map<Character, Integer> count = new HashMap<>();
    for (int i = 0; i < str.length(); i++) {
      if(count.containsKey(str.charAt(i)))
        count.put(str.charAt(i) , count.get(str.charAt(i))+1); 
      else count.put(str.charAt(i),1);
       
    }
 
    for (Map.Entry<Character,Integer> mapElement : count.entrySet()) {   //iterating through the unordered map 
      if (mapElement.getValue() > 1) 
        System.out.println(mapElement.getKey() + ", count = " + mapElement.getValue());
    }
  }
 
   public static void main(String args[])
  {
    String str = "test string";
    printDups(str);
  }
}



3. public class Pavan {
    public static void main(String[] args) {
      String s1="2552";
      String s2="";
      for(int i=s1.length()-1;i>=0;i--)
      {
        s2=s2+s1.charAt(i);
      }
     if(s1.equals(s2))
     {
      System.out.println("palindrome");
     }
     else 
     {
      System.out.println("not palindrome");
     }
    }
}


4. import java.io.*; 
  
public class Pavan { 
  
       static void countCharacterType(String str) 
    { 
                int vowels = 0, consonant = 0, specialChar = 0,  
            digit = 0; 
      
                for (int i = 0; i < str.length(); i++) { 
              
            char ch = str.charAt(i); 
      
            if ( (ch >= 'a' && ch <= 'z') ||  
                (ch >= 'A' && ch <= 'Z') ) { 
      
                ch = Character.toLowerCase(ch); 
      
                if (ch == 'a' || ch == 'e' || ch == 'i' || 
                    ch == 'o' || ch == 'u') 
                    vowels++; 
                else
                    consonant++; 
            } 
            else if (ch >= '0' && ch <= '9') 
                digit++; 
            else
                specialChar++; 
        } 
          
        System.out.println("Vowels: " + vowels); 
        System.out.println("Consonant: " + consonant); 
        System.out.println("Digit: " + digit); 
        System.out.println("Special Character: " + specialChar); 
    } 
      
       static public void main (String[] args) 
    { 
        String str = "geeks for geeks121"; 
          
        countCharacterType(str); 
    } 
} 
  

5. import java.util.Arrays;

class Main {
  public static void main(String[] args) {
    String str1 = "Race";
    String str2 = "Care";
    
    str1 = str1.toLowerCase();
    str2 = str2.toLowerCase();

    if(str1.length() == str2.length()) {

      char[] charArray1 = str1.toCharArray();
      char[] charArray2 = str2.toCharArray();

      Arrays.sort(charArray1);
      Arrays.sort(charArray2);

           boolean result = Arrays.equals(charArray1, charArray2);

      if(result) {
        System.out.println(str1 + " and " + str2 + " are anagram.");
      }
      else {
        System.out.println(str1 + " and " + str2 + " are not anagram.");
      }
    }
    else {
      System.out.println(str1 + " and " + str2 + " are not anagram.");
    }
  }
} 


6. public class PangramStringExample1   
{  
static int size = 26;  

static boolean isLetter(char ch)  
{  
if (!Character.isLetter(ch))  
return false;  
return true;  
}  
static boolean containsAllLetters(String str, int len)  
{    
str = str.toLowerCase();  
boolean[] present = new boolean[size];  
for (int i = 0; i < len; i++)   
{    
if (isLetter(str.charAt(i)))   
{  
int letter = str.charAt(i) - 'a';  
present[letter] = true;  
}  
}  
for (int i = 0; i < size; i++)   
{  
if (!present[i])  
return false;  
}  
return true;  
}  
public static void main(String args[])  
{  
String str = "Abcdefghijklmnopqrstuvwxyz";  
int len = str.length();  
if (containsAllLetters(str, len))  
System.out.println("The given string is a pangram string.");  
else  
System.out.println("The given string is not a pangram string.");  
}  
}  

7. import java.util.*;
 
class Pan {
    boolean uniqueCharacters(String str)
    {
                for (int i = 0; i < str.length(); i++)
            for (int j = i + 1; j < str.length(); j++)
                if (str.charAt(i) == str.charAt(j))
                    return false;
 
         return true;
    }
 
    public static void main(String args[])
    {
        GfG obj = new GfG();
        String input = "GeeksforGeeks";
 
        if (obj.uniqueCharacters(input))
            System.out.println("The String " + input + " has all unique characters");
        else
            System.out.println("The String " + input + " has duplicate characters");
    }
}


8. import java.util.*;
 
public class Main {
     
       static char getMaxOccurringChar(String str) {
         
                HashMap<Character, Integer> mp = new HashMap<>();
         
                int n = str.length();
         
        char ans = 0;
         
               int cnt = 0;
         
        for(int i = 0; i < n; i++) {
             
        char c = str.charAt(i);
            mp.put(c, mp.getOrDefault(c, 0) + 1);
             
                        if(cnt < mp.get(c)) {
                ans = c;
                cnt = mp.get(c);
            }
        }
         
        return ans;
    }
 
    public static void main(String[] args) {
        String str = "sample string";
        System.out.println("Max occurring character is: " + getMaxOccurringChar(str));
    }
}
